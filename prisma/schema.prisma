generator client {
  provider      = "prisma-client-js"
  output        = "../src/prisma/client"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @db.Char(36)
  email       String    @unique
  name        String
  phoneNumber String
  roleId      Int       @default(0) @map("role_id")
  isActive    Boolean?  @default(false) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt   DateTime  @default(now()) @map("updated_at") @db.DateTime(0)
  deletedAt   DateTime? @map("deleted_at") @db.DateTime(0)
  Roles       Roles[]
  UserIdentity UserIdentity[]

  @@index([roleId], map: "role_id")
  @@map("users")
}

model Category {
  id            Int           @id @default(autoincrement())
  name          String        @unique(map: "name_unique") @db.VarChar(255)
  isActive      Boolean       @default(false) @map("is_active")
  createdAt     DateTime      @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt     DateTime      @default(now()) @map("updated_at") @db.DateTime(0)
  deletedAt     DateTime?     @map("deleted_at") @db.DateTime(0)
  subCategories SubCategory[]

  @@map("categories")
}

model SubCategory {
  id         Int       @id @default(autoincrement())
  categoryId Int       @map("category_id")
  name       String    @db.VarChar(255)
  isActive   Boolean   @default(false) @map("is_active")
  createdAt  DateTime  @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt  DateTime  @default(now()) @map("updated_at") @db.DateTime(0)
  deletedAt  DateTime? @map("deleted_at") @db.DateTime(0)
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "sub_categories_ibfk_1")

  @@unique([name, categoryId], map: "category_id_name_unique")
  @@index([categoryId], map: "category_id")
  @@map("sub_categories")
}

model Roles {
  id        Int       @id @default(autoincrement())
  name      String    @unique(map: "name_unique") @db.VarChar(255)
  isActive  Boolean   @default(false) @map("is_active")
  createdAt DateTime  @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt DateTime  @default(now()) @map("updated_at") @db.DateTime(0)
  deletedAt DateTime? @map("deleted_at") @db.DateTime(0)
  User      User?     @relation(fields: [userId], references: [id])
  userId    String?   @db.Char(36)

  @@map("roles")
}

model OTP {
  token  String    @unique @db.Char(36)
  email  String    @db.VarChar(16)
  otp    String    @id @db.VarChar(60)
  expiry DateTime?

  @@index([email], map: "email")
  @@map("otps")
}

model Departments {
  id        Int       @id @default(autoincrement())
  name      String    @unique(map: "name_unique") @db.VarChar(255)
  isActive  Boolean   @default(false) @map("is_active") 
  createdAt DateTime  @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt DateTime  @default(now()) @map("updated_at") @db.DateTime(0)
  deletedAt DateTime? @map("deleted_at") @db.DateTime(0)
  DepartmentManagement DepartmentManagements[]

  @@map("departments")
}

model DepartmentManagements {
  id            Int           @id @default(autoincrement())
  divisionId    Int           @map("division_id")
  departmentId  Int           @map("department_id")
  titleId       Int           @map("title_id")
  isProfitCenter Boolean      @default(false) @map("is_profit_center")
  isActive      Boolean       @default(false) @map("is_active")
  createdAt     DateTime      @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt     DateTime      @default(now()) @map("updated_at") @db.DateTime(0)
  deletedAt     DateTime?     @map("deleted_at") @db.DateTime(0)
  department    Departments   @relation(fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "department_management_ibfk_1")
  title        TitleOfDepartments @relation(fields: [titleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "department_management_ibfk_2")
  UserIdentity UserIdentity[]

  @@map("department_management")
}

model TitleOfDepartments {
  id        Int       @id @default(autoincrement())
  name      String    @unique(map: "name_unique") @db.VarChar(255)
  isLeader Boolean   @default(false) @map("is_leader")
  isActive  Boolean   @default(false) @map("is_active")
  createdAt DateTime  @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt DateTime  @default(now()) @map("updated_at") @db.DateTime(0)
  deletedAt DateTime? @map("deleted_at") @db.DateTime(0)
  DepartmentManagement DepartmentManagements[]

  @@map("title_of_departments")
}

model UserIdentity {
  id        Int       @id @default(autoincrement())
  userId    String    @map("user_id") @db.Char(36)
  divisionId Int      @map("division_id")
  titleOfDivisionId Int @map("title_of_division_id")
  DepartmentManagementId Int @map("department_management_id")
  createdAt DateTime  @default(now()) @map("created_at") @db.DateTime(0)
  updatedAt DateTime  @default(now()) @map("updated_at") @db.DateTime(0)
  deletedAt DateTime? @map("deleted_at") @db.DateTime(0)
  User      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_identity_ibfk_1")
  DepartmentManagement DepartmentManagements @relation(fields: [DepartmentManagementId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_identity_ibfk_2")

  @@map("user_identity")
}
